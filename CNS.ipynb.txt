{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNDF0K1vDiLissAA/bObHC1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nithin1314/CNS/blob/main/CNS.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A Digital Signature System ensures the authenticity and integrity of digital messages or documents. The basic idea is to use public-key cryptography to generate a signature from a message, which can then be verified by the recipient using the sender's public key."
      ],
      "metadata": {
        "id": "ALwNaAru7tP6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pip install rsa\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jUL_3yzv5Deq",
        "outputId": "f9267d90-5fe8-4ebb-878f-8d95ac1e43c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: rsa in /usr/local/lib/python3.11/dist-packages (4.9)\n",
            "Requirement already satisfied: pyasn1>=0.1.3 in /usr/local/lib/python3.11/dist-packages (from rsa) (0.6.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import rsa\n",
        "print(\"RSA module imported successfully!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yopzsmqQ5GVY",
        "outputId": "a990ab86-2840-4573-b2c6-f46d5635dcd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RSA module imported successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_keys():\n",
        "    \"\"\"Generate RSA key pair (public and private keys).\"\"\"\n",
        "    public_key, private_key = rsa.newkeys(2048)\n",
        "    return public_key, private_key"
      ],
      "metadata": {
        "id": "MJS_39xy7DEC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def sign_message(message, private_key):\n",
        "    \"\"\"Sign the message using the private key.\"\"\"\n",
        "    message_bytes = message.encode()  # Convert message to bytes\n",
        "    signature = rsa.sign(message_bytes, private_key, 'SHA-256')\n",
        "    return signature.hex()  # Convert to hexadecimal for easy display\n"
      ],
      "metadata": {
        "id": "dzH3CGU27FkR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def verify_signature(message, signature_hex, public_key):\n",
        "    \"\"\"Verify the digital signature using the public key.\"\"\"\n",
        "    try:\n",
        "        message_bytes = message.encode()\n",
        "        signature = bytes.fromhex(signature_hex)  # Convert hex back to bytes\n",
        "        rsa.verify(message_bytes, signature, public_key)\n",
        "        return True  # Signature is valid\n",
        "    except rsa.VerificationError:\n",
        "        return False  # Signature is invalid\n",
        "    except ValueError:\n",
        "        return False  # Incorrect signature format\n"
      ],
      "metadata": {
        "id": "lGarZB1F7Igu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    print(\"Generating RSA keys...\")\n",
        "    public_key, private_key = generate_keys()\n",
        "\n",
        "    message = \"This is a confidential message.\"\n",
        "    print(\"\\nOriginal Message:\", message)\n",
        "\n",
        "    # Generate digital signature\n",
        "    signature = sign_message(message, private_key)\n",
        "    print(\"\\nGenerated Digital Signature:\", signature)\n",
        "\n",
        "    # Verify signature\n",
        "    is_valid = verify_signature(message, signature, public_key)\n",
        "    if is_valid:\n",
        "        print(\"\\n✅ Signature is valid!\")\n",
        "    else:\n",
        "        print(\"\\n❌ Signature is invalid!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ftv-Ba1u7LOL",
        "outputId": "22083044-4b46-49fd-e0e0-a4d7b2734f94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating RSA keys...\n",
            "\n",
            "Original Message: This is a confidential message.\n",
            "\n",
            "Generated Digital Signature: 739456d1a1e92eb90c7c8e1c275c2218a84a59d587d599873eed091969eed1ae1a151ed38cd3a88bc0443fa27f7422b9afa2ff4e5ee633ec75fa6fe57ab07f5877027397aaf7fbd6d3c0dc2bb4fcb748a513a09bdd6128a9101c7d00d738d33fcf01d58d63ce3bbc92cc4ac69514c75f9a7b7db5095aff08dc936edea43d55b4f0dc28e60e52445689163086b74ac2ae946b2268211d8b7fc0ce2bbc4c2c2ffba00a5fca8c43bf5f4628bd6b008c2fd729ca6b540df0e55d25078d6cd56914414c882bfd3067e0eea26a3bf6ab193cdb2edd187ba298f6b7623ac80d4cf0f712b9459cf3e47012f9da0ce10fa3a78ace7978a27afe88ccdbf452c31a8ca77999\n",
            "\n",
            "✅ Signature is valid!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***RSA Digital Signature Scheme using Python***"
      ],
      "metadata": {
        "id": "4VjHkR0h7d56"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "RSA algorithm is an asymmetric cryptography algorithm. Asymmetric actually means that it works on two different keys i.e. Public Key and Private Key. As the name describes that the Public Key is given to everyone and the Private key is kept private."
      ],
      "metadata": {
        "id": "l__tOaxW7nlx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9-Bi3JhA33Ah"
      },
      "outputs": [],
      "source": [
        "def euclid(m, n):\n",
        "\n",
        "\tif n == 0:\n",
        "\t\treturn m\n",
        "\telse:\n",
        "\t\tr = m % n\n",
        "\t\treturn euclid(n, r)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Program to find\n",
        "# Multiplicative inverse\n",
        "def exteuclid(a, b):\n",
        "\n",
        "\tr1 = a\n",
        "\tr2 = b\n",
        "\ts1 = int(1)\n",
        "\ts2 = int(0)\n",
        "\tt1 = int(0)\n",
        "\tt2 = int(1)\n",
        "\n",
        "\twhile r2 > 0:\n",
        "\n",
        "\t\tq = r1//r2\n",
        "\t\tr = r1-q * r2\n",
        "\t\tr1 = r2\n",
        "\t\tr2 = r\n",
        "\t\ts = s1-q * s2\n",
        "\t\ts1 = s2\n",
        "\t\ts2 = s\n",
        "\t\tt = t1-q * t2\n",
        "\t\tt1 = t2\n",
        "\t\tt2 = t\n",
        "\n",
        "\tif t1 < 0:\n",
        "\t\tt1 = t1 % a\n",
        "\n",
        "\treturn (r1, t1)\n"
      ],
      "metadata": {
        "id": "lptMBZ9F4FMY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Enter two large prime\n",
        "# numbers p and q\n",
        "p = 823\n",
        "q = 953\n",
        "n = p * q\n",
        "Pn = (p-1)*(q-1)\n",
        "\n",
        "# Generate encryption key\n",
        "# in range 1<e<Pn\n",
        "key = []\n",
        "\n",
        "for i in range(2, Pn):\n",
        "\n",
        "\tgcd = euclid(Pn, i)\n",
        "\n",
        "\tif gcd == 1:\n",
        "\t\tkey.append(i)\n"
      ],
      "metadata": {
        "id": "Z1x01iYc4KOY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Select an encryption key\n",
        "# from the above list\n",
        "e = int(313)\n",
        "\n",
        "# Obtain inverse of\n",
        "# encryption key in Z_Pn\n",
        "r, d = exteuclid(Pn, e)\n",
        "if r == 1:\n",
        "\td = int(d)\n",
        "\tprint(\"decryption key is: \", d)\n",
        "\n",
        "else:\n",
        "\tprint(\"Multiplicative inverse for\\\n",
        "\tthe given encryption key does not \\\n",
        "\texist. Choose a different encryption key \")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7tq97TTq4QBI",
        "outputId": "a6c44ea1-045a-47fb-aaa5-50eae613b379"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "decryption key is:  160009\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Enter the message to be sent\n",
        "M = 19070\n",
        "\n",
        "# Signature is created by Alice\n",
        "S = (M**d) % n\n",
        "\n",
        "# Alice sends M and S both to Bob\n",
        "# Bob generates message M1 using the\n",
        "# signature S, Alice's public key e\n",
        "# and product n.\n",
        "M1 = (S**e) % n\n",
        "\n",
        "# If M = M1 only then Bob accepts\n",
        "# the message sent by Alice.\n",
        "\n",
        "if M == M1:\n",
        "\tprint(\"As M = M1, Accept the\\\n",
        "\tmessage sent by Alice\")\n",
        "else:\n",
        "\tprint(\"As M not equal to M1,\\\n",
        "\tDo not accept the message\\\n",
        "\tsent by Alice \")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddT0VbdZ4TmT",
        "outputId": "936380b0-9c1d-42bc-8474-1f630da09d08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "As M = M1, Accept the\tmessage sent by Alice\n"
          ]
        }
      ]
    }
  ]
}